using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AddressableAssets;
using UnityEngine.ResourceManagement.AsyncOperations;
using UnityEngine.ResourceManagement.ResourceProviders;
using UnityEngine.SceneManagement;


public class LoadAddressableScene : MonoBehaviour
{
    [SerializeField] private AssetReference _scene;
    //[SerializeField] private List<AssetReference> _references = new List<AssetReference>(); // In case of multiple scenes
    private AsyncOperationHandle<SceneInstance> handle;
    public GameObject camera;
    public DownloadProgress downloadProgressScript; // So I can pass the progress someone else
    public GameObject uiGameObject;

    private void Awake()
    {
        DontDestroyOnLoad(gameObject);
    }

    private void Start()
    {
        StartCoroutine(DownloadScene());
    }

    IEnumerator DownloadScene()
    {
        var downloadScene = Addressables.LoadSceneAsync(_scene, LoadSceneMode.Additive);
        downloadScene.Completed += SceneDownloadComplete;
        Debug.LogError("Starting scene download");

        while(!downloadScene.IsDone)
        {
            var status = downloadScene.GetDownloadStatus();
            float progress = status.Percent; // Stores the current download progress
            downloadProgressScript.downloadProgressInput = (int)(progress * 100);
            yield return null;
        }

        Debug.LogError("Download Complete, starting next scene");
        downloadProgressScript.downloadProgressInput = 100;
    }

    private void SceneDownloadComplete(AsyncOperationHandle<SceneInstance> _handle) // Ref to AsyncOperationHandle
    {
        if (_handle.Status == AsyncOperationStatus.Succeeded)
        {
            Debug.LogError(_handle.Result.Scene.name + " successfully loaded.");
            camera.SetActive(false);
            uiGameObject.SetActive(false);
            handle = _handle;
            StartCoroutine(UnloadScene());
        }
    }

    private IEnumerator UnloadScene()
    {
        yield return new WaitForSeconds(10); // lets give the scene 10 seconds before unloading
        Addressables.UnloadSceneAsync(handle, true).Completed += op =>
        {
            if (op.Status == AsyncOperationStatus.Succeeded)
            {
                camera.SetActive(true);
                uiGameObject.SetActive(true);
                Debug.LogError("Successfully unloaded the scene");
            }
        };

        yield return new WaitForSeconds(5); // 5 seconds after unloading, load it back up again - for fun
        StartCoroutine(DownloadScene());
    }
}
